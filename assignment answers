1. Matrix Diagonal Sum: https://leetcode.com/problems/matrix-diagonal-sum/

class Solution {
    public int diagonalSum(int[][] mat) {
        int n=mat.length;
        int sum1=0;
        int res=0;
        for(int i=0;i<n;i++){
            sum1+=mat[i][i];
        }
        int sum2=0;
         for(int i=0;i<n;i++){
            sum2+=mat[i][n-1-i];
        }

        return res=(n%2!=0)?sum1+sum2-mat[n/2][n/2]:sum1+sum2;
    }
}
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
2.Rotate Image
class Solution {
    public void rotate(int[][] matrix) {
         int len = matrix.length;

          for(int i = 0; i < len; i++) {
            for(int j = 0; j < i; j++) {
                int tmp = matrix[i][j];
                matrix[i][j] = matrix[j][i];
                matrix[j][i] = tmp;
            }
        }

        for(int i=0;i<len;i++){
          int lp = 0;
            int rp=len-1;
            while(lp<rp){
                int temp= matrix[i][lp];
                matrix[i][lp]=matrix[i][rp];
                matrix[i][rp]=temp;
                 lp++;
                rp--;
            }  
        }        
    }
}

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
3.Spiral Matrix II
class Solution {
    public int[][] generateMatrix(int n) {
         int[][] matrix = new int[n][n];
          if (n == 0) {
            return matrix;
        }
        int minr=0;
        int minc=0;
        int maxr=n-1;
        int maxc=n-1;
       
        int num=1;
       
        while(minr<=maxc && minc<=maxc){
        for(int i=minc;i<=maxc;i++){
                matrix[minr][i]=num++;
            }
            minr++;
        for(int i=minr;i<=maxr;i++){
                matrix[i][maxc]=num++;
            }
            maxc--;
        for(int i=maxc;i>=minc;i--){
                matrix[maxr][i]=num++;
            }
            maxr--; 
        for(int i=maxr;i>=minr;i--){
                matrix[i][minc]=num++;
            }
            minc++;      
        }
        return matrix;
    }
}
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
4.Transpose a matrix

class Solution {
    public int[][] transpose(int[][] matrix) {
        
        int res[][]=new int[matrix[0].length][matrix.length];
         for(int i=0;i<matrix.length;i++){
             for(int j=0;j<matrix[0].length;j++){
                 res[j][i]=matrix[i][j];
             }
         }
         return res;
    }
}
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
5.Set Matrix zero

int m = matrix.length;
       int n = matrix[0].length;
  int row[]=new int[m];
     int col[]=new int[n];
     for(int i=0;i<m;i++){
           for(int j=0;j<n;j++){
               if(matrix[i][j]==0){
                 row[i]=1;
                 col[j]=1;
               }
           }
       }
    for(int i=0;i<m;i++){
           for(int j=0;j<n;j++){
             if(row[i]==1||col[j]==1){
                 matrix[i][j]=0;
             }
           }
       }
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
8.Matrix sum
public class matrixAdd {
public static void main(String[] args) {
	int A[][] = { { 1, 2, 3 },
            { 4, 5, 6} ,
            {7, 8, 9}
            };

int B[][] = { { 9, 8, 7 },
            { 6, 5, 4},
            {3, 2, 1}};
int[][] matrixSum = matrixSum(A,B);
for(int i=0;i<matrixSum.length;i++) {
	for(int j=0;j<matrixSum[0].length;j++) {
		System.out.print(matrixSum[i][j]+" ");
	}
	System.out.println();
}
}
private static int[][] matrixSum(int[][] a, int[][] b) {
	if(a.length == 0 || b.length == 0) { return new int[0][0]; }
    int[][] sum = new int[a.length][a[0].length];
    
    for(int i = 0; i < a.length; i++) {
        for(int j = 0; j < a[0].length; j++) {
            sum[i][j] = a[i][j] + b[i][j];
        }
    }
    return sum;
	
}
}
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
9.You are given two integer matrices A and B having same size(Both having same number of rows (N) and columns (M). You have to subtract matrix B from A and return the resultant matrix. (i.e. return the matrix A - B).
If A and B are two matrices of the same order (same dimensions). Then A - B is a matrix of the same order as A and B and its elements are obtained by doing an element wise subtraction of A from B.


public class matrixAdd {
public static void main(String[] args) {
	int A[][] = { { 1, 2, 3 },
            { 4, 5, 6} ,
            {7, 8, 9}
            };

int B[][] = { { 9, 8, 7 },
            { 6, 5, 4},
            {3, 2, 1}};
int[][] matrixSum = matrixSum(A,B);
for(int i=0;i<matrixSum.length;i++) {
	for(int j=0;j<matrixSum[0].length;j++) {
		System.out.print(matrixSum[i][j]+" ");
	}
	System.out.println();
}

}

private static int[][] matrixSum(int[][] a, int[][] b) {
	if(a.length == 0 || b.length == 0) { return new int[0][0]; }
    int[][] sum = new int[a.length][a[0].length];
    
    for(int i = 0; i < a.length; i++) {
        for(int j = 0; j < a[0].length; j++) {
            sum[i][j] = a[i][j] - b[i][j];
        }
    }
    return sum;
	
}
}
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
10.You are given a 2D integer matrix A, return a 1D integer array containing column-wise sums of original matrix.


public class colSum {
public static void main(String[] args) {
	int matrix[][] = {{1,2,3,4},
            {5,6,7,8},
            {9,2,3,4}};
	int[] printColSum = printColSum(matrix);
	 for(int i: printColSum) {
         System.out.println(i);
	 }
}

private static int[]  printColSum(int[][] matrix) {

	 int rows = matrix.length;
     int cols = matrix[0].length;
     int[] colSum = new int[cols];
     for(int i = 0; i < cols; i++)
     {
        
         int sum = 0;

        
         for(int j = 0; j < rows; j++)
            
             sum += matrix[j][i];
         
         colSum[i] = sum;
     }
     return colSum;
	
}
}
